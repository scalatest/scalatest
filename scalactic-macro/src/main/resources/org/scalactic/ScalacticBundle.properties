bigProblems=An exception or error caused a run to abort.
bigProblemsWithMessage=An exception or error caused a run to abort: {0}
didNotEqual={0} did not equal {1}
equaled={0} equaled {1}
wasPlusOrMinus={0} was {1} plus or minus {2}
wasNotPlusOrMinus={0} was not {1} plus or minus {2}
expressionWasFalse=Expression was false
expressionWasTrue=Expression was true
wasNull={0} was null
wereNull={0} were null
comma=,\u0020
and={0} and {1}
wasTrue={0} was true
wasFalse={0} was false
wasLessThan={0} was less than {1}
wasNotLessThan={0} was not less than {1}
wasGreaterThan={0} was greater than {1}
wasNotGreaterThan={0} was not greater than {1}
wasLessThanOrEqualTo={0} was less than or equal to {1}
wasNotLessThanOrEqualTo={0} was not less than or equal to {1}
wasGreaterThanOrEqualTo={0} was greater than or equal to {1}
wasNotGreaterThanOrEqualTo={0} was not greater than or equal to {1}
didNotStartWith={0} did not start with {1}
startedWith={0} started with {1}
didNotEndWith={0} did not end with {1}
endedWith={0} ended with {1}
didNotContain={0} did not contain {1}
contained={0} contained {1}
didNotContainKey={0} did not contain key {1}
containedKey={0} contained key {1}
wasTheSameInstanceAs={0} was the same instance as {1}
wasNotTheSameInstanceAs={0} was not the same instance as {1}
wasNotEmpty={0} was not empty
wasEmpty={0} was empty
wasNotInstanceOf={0} was not instance of {1}
wasInstanceOf={0} was instance of {1}
hadLengthInsteadOfExpectedLength={0} had length {1} instead of expected length {2}
hadLength={0} had length {1}
hadSizeInsteadOfExpectedSize={0} had size {1} instead of expected size {2}
hadSize={0} had size {1}
commaBut={0}, but {1}
commaAnd={0}, and {1}
variableWasValue={0} was {1}
notValidPosInt=PosInt.apply can only be invoked on a positive (n > 0) integer literal, like PosInt(42).
notLiteralPosInt=PosInt.apply can only be invoked on an integer literal, like PosInt(42). Please use PosInt.from instead.
notValidPosLong=PosLong.apply can only be invoked on a positive (n > 0L) long literal, like PosLong(42L).
notLiteralPosLong=PosLong.apply can only be invoked on an integer literal, like PosLong(42L). Please use PosLong.from instead.
notValidPosFloat=PosFloat.apply can only be invoked on a positive (n > 0.0F && !n.isNaN) floating point literal, like PosFloat(42.0F).
notLiteralPosFloat=PosFloat.apply can only be invoked on a floating point literal, like PosFloat(42.0F). Please use PosFloat.from instead.
notValidPosDouble=PosDouble.apply can only be invoked on a positive (n > 0.0 && !n.isNaN) floating point literal, like PosDouble(42.0).
notLiteralPosDouble=PosDouble.apply can only be invoked on a floating point literal, like PosDouble(42.0). Please use PosDouble.from instead.
notValidPosZInt=PosZInt.apply can only be invoked on a non-negative (n >= 0) integer literal, like PosZInt(42).
notLiteralPosZInt=PosZInt.apply can only be invoked on an integer literal, like PosZInt(42). Please use PosZInt.from instead.
notValidPosZLong=PosZLong.apply can only be invoked on a non-negative (n >= 0L) integer literal, like PosZLong(42L).
notLiteralPosZLong=PosZLong.apply can only be invoked on an long literal, like PosZLong(42L). Please use PosZLong.from instead.
notValidPosZFloat=PosZFloat.apply can only be invoked on a non-negative (n >= 0.0F && !n.isNaN) floating point literal, like PosZFloat(42.0F).
notLiteralPosZFloat=PosZFloat.apply can only be invoked on a floating point literal, like PosZFloat(42.0F). Please use PosZFloat.from instead.
notValidPosZDouble=PosZDouble.apply can only be invoked on a non-negative (n >= 0.0 && !n.isNaN) floating point literal, like PosZDouble(42.0).
notLiteralPosZDouble=PosZDouble.apply can only be invoked on a floating point literal, like PosZDouble(42.0). Please use PosZDouble.from instead.
pleaseDefineScalacticFillFilePathnameEnvVar=Please set the environment variable SCALACTIC_FILL_FILE_PATHNAMES to yes at compile time to enable this feature.
notValidNonZeroInt=NonZeroInt.apply can only be invoked on a non-zero (n != 0) integer literal, like NonZeroInt(42).
notLiteralNonZeroInt=NonZeroInt.apply can only be invoked on an integer literal, like NonZeroInt(42). Please use NonZeroInt.from instead.
notValidNonZeroLong=NonZeroLong.apply can only be invoked on a non-zero (n != 0L) long literal, like NonZeroLong(42L).
notLiteralNonZeroLong=NonZeroLong.apply can only be invoked on an long literal, like NonZeroLong(42L). Please use NonZeroLong.from instead.
notValidNonZeroFloat=NonZeroFloat.apply can only be invoked on a non-zero (n != 0.0F && !i.isNaN) floating point literal, like NonZeroFloat(1.1F).
notLiteralNonZeroFloat=NonZeroFloat.apply can only be invoked on a floating point literal, like NonZeroFloat(1.1F). Please use NonZeroFloat.from instead.
notValidNonZeroDouble=NonZeroDouble.apply can only be invoked on a non-zero (n != 0.0 && !i.isNaN) double literal, like NonZeroDouble(42.0).
notLiteralNonZeroDouble=ZonZeroDouble.apply can only be invoked on a non-zero literal, like NonZeroDouble(42.0). Please use NonZeroDouble.from instead.
notValidNegInt=NegInt.apply can only be invoked on a negative (n < 0) integer literal, like NegInt(-42).
notLiteralNegInt=NegInt.apply can only be invoked on an integer literal, like NegInt(-42). Please use NegInt.from instead.
notValidNegLong=NegLong.apply can only be invoked on a negative (n < 0L) long literal, like NegLong(-42L).
notLiteralNegLong=NegLong.apply can only be invoked on a long literal, like NegLong(-42L). Please use NegLong.from instead.
notValidNegFloat=NegFloat.apply can only be invoked on a negative (n < 0.0F && !n.isNaN) floating point literal, like NegFloat(-42.0F).
notLiteralNegFloat=NegFloat.apply can only be invoked on a floating point literal, like NegFloat(-42.0F). Please use NegFloat.from instead.
notValidNegDouble=NegDouble.apply can only be invoked on a negative (n < 0.0 && !n.isNaN) floating point literal, like NegDouble(-42.0).
notLiteralNegDouble=NegDouble.apply can only be invoked on a floating point literal, like NegDouble(-42.0). Please use NegDouble.from instead.
notValidNegZInt=NegZInt.apply can only be invoked on a non-positive (n <= 0) integer literal, like NegZInt(42).
notLiteralNegZInt=NegZInt.apply can only be invoked on an integer literal, like NegZInt(-42). Please use NegZInt.from instead.
notValidNegZLong=NegZLong.apply can only be invoked on a non-positive (n <= 0L) integer literal, like NegZLong(-42L).
notLiteralNegZLong=NegZLong.apply can only be invoked on an integer literal, like NegZLong(-42L). Please use NegZLong.from instead.
notValidNegZFloat=NegZFloat.apply can only be invoked on a non-positive (n <= 0.0F && !n.isNaN) floating point literal, like NegZFloat(-42.0F).
notLiteralNegZFloat=NegZFloat.apply can only be invoked on a floating point literal, like NegZFloat(-42.0F). Please use NegZFloat.from instead.
notValidNegZDouble=NegZDouble.apply can only be invoked on a non-positive (n <= 0.0 && !n.isNaN) floating point literal, like NegZDouble(-42.0).
notLiteralNegZDouble=NegZDouble.apply can only be invoked on a floating point literal, like NegZDouble(-42.0). Please use NegZDouble.from instead.
notValidPosFiniteFloat=PosFiniteFloat.apply can only be invoked on a finite positive (n > 0.0F && n != Float.PositiveInfinity && !n.isNaN) floating point literal, like PosFiniteFloat(42.0F).
notLiteralPosFiniteFloat=PosFinietFloat.apply can only be invoked on a floating point literal, like PosFiniteFloat(42.0F). Please use PosFiniteFloat.from instead.
notValidPosFiniteDouble=PosFiniteDouble.apply can only be invoked on a finite positive (n > 0.0 && n != Double.PositiveInfinity && !n.isNaN) floating point literal, like PosFiniteDouble(42.0).
notLiteralPosFiniteDouble=PosFiniteDouble.apply can only be invoked on a floating point literal, like PosFiniteDouble(42.0). Please use PosFiniteDouble.from instead.
notValidPosZFiniteFloat=PosZFiniteFloat.apply can only be invoked on a finite non-negative (n >= 0.0F && n != Float.PositiveInfinity && !n.isNaN) floating point literal, like PosZFiniteFloat(42.0F).
notLiteralPosZFiniteFloat=PosZFiniteFloat.apply can only be invoked on a floating point literal, like PosZFiniteFloat(42.0F). Please use PosZFiniteFloat.from instead.
notValidPosZFiniteDouble=PosZFiniteDouble.apply can only be invoked on a finite non-negative (n >= 0.0 && n != Double.PositiveInfinity && !n.isNaN) floating point literal, like PosZFiniteDouble(42.0).
notLiteralPosZFiniteDouble=PosZFiniteDouble.apply can only be invoked on a floating point literal, like PosZFiniteDouble(42.0). Please use PosZFiniteDouble.from instead.
notValidNegFiniteFloat=NegFiniteFloat.apply can only be invoked on a finite negative (n < 0.0F && n != Float.NegativeInfinity && !n.isNaN) floating point literal, like NegFiniteFloat(-42.0F).
notLiteralNegFiniteFloat=NegFiniteFloat.apply can only be invoked on a floating point literal, like NegFiniteFloat(-42.0F). Please use NegFiniteFloat.from instead.
notValidNegFiniteDouble=NegFiniteDouble.apply can only be invoked on a finite negative (n < 0.0 && n != Double.NegativeInfinity && !n.isNaN) floating point literal, like NegFiniteDouble(-42.0).
notLiteralNegFiniteDouble=NegFiniteDouble.apply can only be invoked on a floating point literal, like NegFiniteDouble(-42.0). Please use NegFiniteDouble.from instead.
notValidNegZFiniteFloat=NegZFiniteFloat.apply can only be invoked on a finite non-positive (n <= 0.0F && n != Float.NegativeInfinity && !n.isNaN) floating point literal, like NegZFiniteFloat(-42.0F).
notLiteralNegZFiniteFloat=NegZFiniteFloat.apply can only be invoked on a floating point literal, like NegZFiniteFloat(-42.0F). Please use NegZFiniteFloat.from instead.
notValidNegZFiniteDouble=NegZFiniteDouble.apply can only be invoked on a finite non-positive (n <= 0.0 && n != Double.NegativeInfinity && !n.isNaN) floating point literal, like NegZFiniteDouble(-42.0).
notLiteralNegZFiniteDouble=NegZFiniteDouble.apply can only be invoked on a floating point literal, like NegZFiniteDouble(-42.0). Please use NegZFiniteDouble.from instead.
notValidNonZeroFiniteFloat=NonZeroFiniteFloat.apply can only be invoked on a finite non-zero (n != 0.0F && n != Float.PositiveInfinity && n != Float.NegativeInfinity && !n.isNaN) floating point literal, like NonZeroFiniteFloat(1.1F).
notLiteralNonZeroFiniteFloat=NonZeroFiniteFloat.apply can only be invoked on a floating point literal, like NonZeroFloat(1.1F). Please use NonZeroFiniteFloat.from instead.
notValidNonZeroFiniteDouble=NonZeroFiniteDouble.apply can only be invoked on a finite non-zero (n != 0.0 && n != Double.PositiveInfinity && n != Double.NegativeInfinity && !n.isNaN) double literal, like NonZeroFiniteDouble(42.0).
notLiteralNonZeroFiniteDouble=ZonZeroFiniteDouble.apply can only be invoked on a finite non-zero literal, like NonZeroFiniteDouble(42.0). Please use NonZeroFiniteDouble.from instead.
notValidFiniteFloat=PosFiniteFloat.apply can only be invoked on a finite (n != Float.PositiveInfinity && n != Float.NegativeInfinity) floating point literal, like FiniteFloat(42.0F).
notLiteralFiniteFloat=PosFiniteFloat.apply can only be invoked on a floating point literal, like FiniteFloat(42.0F). Please use FiniteFloat.from instead.
notValidFiniteDouble=PosFiniteDouble.apply can only be invoked on a finite (n != Double.PositiveInfinity && n != Double.NegativeInfinity) floating point literal, like FiniteDouble(42.0).
notLiteralFiniteDouble=PosFiniteDouble.apply can only be invoked on a floating point literal, like FiniteDouble(42.0). Please use FiniteDouble.from instead.
notValidNumericChar=NumericChar.apply can only be invoked on Char literals that are numbers, like '8'.
notLiteralNumericChar=NumericChar.apply can only be invoked on Char literals that are numbers, like '8'. Please use NumericChar.from instead.
invalidSize=Invalid size: {0}